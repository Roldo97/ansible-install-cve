---
# tasks file for roles/cve-patch-rhel
- ansible.builtin.set_fact:
    cve_list: "{{ cves | split }}"

- name: Ensures that yum-utils is installed
  ansible.builtin.yum:
    name: yum-utils
    state: present

- name: Save current date and time in a variable
  ansible.builtin.set_fact:
    current_date: "{{ ansible_date_time.year }}-{{ ansible_date_time.month }}-{{ ansible_date_time.day }}-{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}"
    
#- name: Check Satellite API
#  ansible.builtin.uri:
#    url: "https://{{ satellite_host }}/katello/api/errata?full_result=true&errata_restrict_installable=1&organization_id=1"
#    user: "{{ satllite_user }}"
#    password: "{{ satellite_password }}"
#    method: GET
#    force_basic_auth: true
#    validate_certs: false
#  register: satellite_data
#  delegate_to: localhost
#  run_once: true

#- name: Set per-severity arrays
#  delegate_to: localhost
#  run_once: true
#  block:
#    - ansible.builtin.set_fact: important="{{ satellite_data | json_query('json.results[?severity==`Important`].cves[*].cve_id') | flatten }}"
#    - ansible.builtin.set_fact: low="{{ satellite_data | json_query('json.results[?severity==`Low`].cves[*].cve_id') | flatten }}"
#    - ansible.builtin.set_fact: moderate="{{ satellite_data | json_query('json.results[?severity==`Moderate`].cves[*].cve_id') | flatten }}"
#    - ansible.builtin.set_fact: critical="{{ satellite_data | json_query('json.results[?severity==`Critical`].cves[*].cve_id') | flatten }}"
      
- name: Ensures report file exists
  ansible.builtin.lineinfile:
    path: "files/{{ tarea_sga }}-report-{{ current_date }}.csv"
    line: "HOSTNAME,CVE,SEVERITY,INSTALL DATE,REBOOT REQUIRED"
    create: yes
  delegate_to: localhost
  run_once: true

- name: Check per CVE and fills report data
  ansible.builtin.include_tasks: report_tasks.yml
  loop: "{{ cve_list }}"

- name: Check if CVEs are available
  register: result
  changed_when: false
  failed_when: result.rc != 0 and result.rc != 100
  ansible.builtin.shell: "{{ ansible_facts['pkg_mgr'] }} check-update {{ lookup('ansible.builtin.template', 'cve.j2') }}"

- name: Install CVEs
  when: result.rc == 100
  ansible.builtin.shell: "{{ ansible_facts['pkg_mgr'] }} update -y {{ lookup('ansible.builtin.template', 'cve.j2') }}"
  register: resultado_parcheado

- name: GeneraDetalleDePaquetes
  when: result.rc == 100
  delegate_to: localhost
  block:     
    - name: GeneraDetallePaquetesActualizados
      ansible.builtin.blockinfile:
        path: "files/{{ tarea_sga }}-{{ inventory_hostname }}-{{ current_date }}.txt"
        create: true
        block: "{{ resultado_parcheado['stdout'] }}"
        
    - name: AgregaNombreHost
      ansible.builtin.lineinfile: 
        path: "files/{{ tarea_sga }}-{{ inventory_hostname }}-{{ current_date }}.txt"
        line: "{{ inventory_hostname }}"
        insertafter: "EOF"
  
- name: Check if system needs reboot
  register: reboot_needed
  changed_when: false
  failed_when: false
  ansible.builtin.command: needs-restarting -r
  #async: 120  # Tiempo en segundos para esperar antes de considerar que ha fallado
  #poll: 0    # No espera a que finalice inmediatamente
  ignore_errors: yes

- name: Fills Reboot column in report
  delegate_to: localhost
  block:
    - ansible.builtin.replace:
        path: "files/{{ tarea_sga }}-report-{{ current_date }}.csv"
        regexp: '^({{ ansible_fqdn }},CVE-\d{4}-\d{4,7},(Important|Low|Moderate|Critical),{{ current_date }})'
        replace: '\g<1>,true'
      when: "'Reboot is required' in reboot_needed['stdout']"

    - ansible.builtin.replace:
        path: "files/{{ tarea_sga }}-report-{{ current_date }}.csv"
        regexp: '^({{ ansible_fqdn }},CVE-\d{4}-\d{4,7},(Important|Low|Moderate|Critical),{{ current_date }})'
        replace: '\g<1>,false'
      when: "'Reboot is required' not in reboot_needed['stdout']"

- name: Reboot system
  when: "'Reboot is required' in reboot_needed['stdout'] and reboot == 'true'"
  ansible.builtin.reboot:
    reboot_timeout: 3600


- name: ListadoArchivosAEnviar
  ansible.builtin.find:
    paths: files/
  register: adjuntos
  delegate_to: localhost
  run_once: true

#- name: Send report through mail
#  community.general.mail:
#    host: "{{ mail_smtp_host }}"
#    port: 25
#    subject: "{{ tarea_sga }} {{ mail_subject }}"
#    body: "{{ mail_body }}"
#    from: "{{ mail_sender }}"
#    to: "{{ mail_recipient }}"
#    attach: "{{ adjuntos['files'] | map(attribute='path') }}"
#  delegate_to: localhost
#  run_once: true

#- name: Removes report
#  ansible.builtin.file:
#    path: files/report.csv
#    state: absent
#  delegate_to: localhost
